Cytora Golang Academy
Goroutines & channels

Adelina Simion
Senior Software Engineer, Cytora
adelina.simion@cytora.com
@classic_addetz

*
.image images/about-me.png

*
.image images/about-cytora.png

* Format of talks
We have three talks/magic shows each 45-60mins.
*Easy* *magic* *tricks:* *concurrency* *basics* *in* *Go*
introduces and covers the basics.
*Apprentice* *to* *Illusionist:* *channels* *deep* *dive*
discusses more complex channels operations, their usage and their limitations.
*Master* *Illusionist:* *concurrency* *patterns*
presents Go concurrency patterns and real world examples.

.image https://media.giphy.com/media/21T9PmWttOb0EFrrwK/giphy.gif _ 450

* About this slide deck
These slides are built with `go` `present`.

.link https://godoc.org/golang.org/x/tools/present

You can find the slide deck repository on GitHub

.link https://github.com/cytora/goroutines-channels-talks

.image images/go_logo.png _ 550

*
.image images/session2-title.png

* Agenda - Magic show II
This session will cover:

- Recap of pointers
- Recap of sending & receiving on channels
- Closing channels
- The for range
- The `select` keyword
- WaitGroups vs Channels

* Magic refresher - pointer operators
A *pointer* is a memory address to a variable.

The `&` operator generates a pointer to its operand. If the operand is of type `T`, then the type of the pointer is `*T`.

The `*` operator is used to  *dereference* the pointer from its memory address to the current value at that address.

The zero value of pointers is `nil`. Attempting to dereference a `nil` pointer will cause a `panic` ... and not at the Disco!

* Abracadabra!

.play code-session2/pointer_basics.go /START OMIT/,/END OMIT/

* Magic refresher - pointers & argument passing

- Arguments to functions are *passed* *by* *value* in Go. A copy of the argument is made which only lives inside function scope
- Any changes we make to the copy will be lost, as the copy is destroyed by the garbage collector once the function exits
- Passing pointers to functions allow us arguments to be *passed* *by* *reference* and to make permanent changes to variables
- The rules of pointers apply to *method* *receivers* also, as they can be considered the first *implicit* argument of methods
- Pointers themselves are passed by value, so reassigning the pointer to a different variable address will not persist outside the scope of the function
- Unless the object is large, passing by value is significantly cheaper/more performant than passing by pointer as we don't have to chase memory allocations throughout the call stack

* The Rabbit Hat-trick - the hat

.code code-session2/rabbit_hat.go  /START OMIT/,/END OMIT/

* The Rabbit Hat-trick - the trick

.play code-session2/failed/pointers_argument_passing.go  /START OMIT/,/END OMIT/

* The rabbit has escaped the hat!
The rabbit is put inside a copy of the hat living at a different address, which only lives inside function scope.
The rabbit is successfully placed inside the copy-hat, but the original hat remains empty.
The same rules were valid with method receivers and the flowers also elude the hat.

.image https://media.giphy.com/media/fYfeQAOD8pSjN7M0jY/giphy.gif _ 500

* The Pointer Rabbit Hat-trick - the hat
Let's try the rabbit hat trick again by making use of pointers...

.code code-session2/pointer_rabbit_hat.go  /START OMIT/,/END OMIT/

* The Pointer Rabbit Hat-trick - the trick

.play code-session2/success/pointers_argument_passing.go  /START OMIT/,/END OMIT/

* Finally, the rabbit stays put inside the hat!

Once we passed pointers to the hat, changes persisted outside of function scope!
The hat we were modifying was the same as the original hat.

.image https://media.giphy.com/media/MFlhfP81IpKgaN50fq/giphy.gif _ 300


* The WaitGroup Bullet Catch from Session I - the performers

.code code-session2/wg_pointer_performers.go /START OMIT/,/END OMIT/

* The WaitGroup Bullet Catch from Session I - the trick

.play code-session2/success/wg_magic_show.go /START OMIT/,/END OMIT/

* Just as majestic as the first time we saw it!
The WaitGroup Bullet Catch makes use of the `sync.WaitGroup` to make sure that the assistant and magician goroutines execute in an order that makes sense ... and doesn't ruin the magician's reputation!

However, the trick also depends on our friends the pointers.
A pointer to the `sync.WaitGroup` is passed to each goroutine and we mentioned this was *very* important.

Let see what happens without the pointers...

* The WaitGroup Bullet Catch from Session I - the pointless performers

.code code-session2/wg_performers.go /START OMIT/,/END OMIT/

* The WaitGroup Bullet Catch from Session I - the pointless trick

.play code-session2/failed/wg_magic_show.go /START OMIT/,/END OMIT/

* Woah, maybe pointers are the real magicians!
Without the pointers, each goroutine invokes `Done()` on a copy - `WaitGroup` and the `main` goroutine is never released. The Go runtime sees this deadlock and triggers a panic to shut down the hanging program.

Remember, always pass your locks by pointer. The same problem could be replicated with the `sync.Mutex` from the Infinite Hat example from session I.

.image https://media.giphy.com/media/1itbWbkMaweuhH5f6C/giphy.gif _ 350

* Recap - Channel basics
Now let's leave behind the world of pointers, rabbits and hats for a little while and go back to our *channels*.
As we learned in the last session:

- *Unbuffered* channels are initialized with `make(chan` `T)`. *Buffered* channels are given a capacity `make(chan` `T,capacity)`
- Channel sends are blocking until there is space in the channel to send the value ie until channel is not full. Unbuffered channels have no capacity and therefore require both goroutines to be ready to make any exchange.
- Channel receives are blocking until there is a value to be read from the channel
- Channels can be used for synchonization as well as data communication due to the blocking nature of sends and receives

* The Channel Teleporting coin - the coin performer

.code code-session2/coin_performer.go /START OMIT/,/END OMIT/

* The Channel Teleporting coin - the trick

.play code-session2/failed/channels_sends_receives.go /START OMIT/,/END OMIT/

* Another trick failure!
Our goroutines have hit a deadlock!
Remember that unbuffered channels need both sender and receiver to be present to make the exchange.
The performer that first reaches their limit takes a bow and exits. The other performer then tries to send the coin to the coin channel, which then blocks forever as no one will ever try to read from the channel.

.image https://media.giphy.com/media/3o7TKqnMdPFGtzD6zm/giphy.gif _ 350
* The Buffered Channel Teleporting coin - the trick

.play code-session2/success/channels_sends_receives.go /START OMIT/,/END OMIT/

* How did that coin move so fast!
The performers sent the coin between themselves very quickly.
The buffered channel kept the coin at the end, even if the other magician finished and has taken his bow.

The real trick is in the magic of the channels!

.image https://media.giphy.com/media/h8D1M8clhWfBmK16wb/giphy.gif _ 550

* Hang on, why don't we pass pointers to channels?
The eagle eyed in the audience will notice that we didn't pass pointers to channels during the Teleporting Coin trick. What was crucial for the `sync.WaitGroup`
doesn't seem to matter for channels. What kind of *magic* is this?

The `make` function creates *slices*, *maps*, and *channels* only.
It returns an initialized (not zeroed) value of type `T` (not `*T`). The reason for the distinction is that these three types represent, under the covers, references to data structures that must be initialized before use.
The resulting value of `make(chan` `T)` is a reference to an underlying channel data structure. The `sync.Mutex` and `sync.WaitGroup` are just plain `struct` so we must handle their pointers explicitly.

Rest assured, the pointers are there working their magic with the channels!

* Closing channels
Senders have the ability to close the channel to notify receivers that no more data will be sent on the channel.
A closed channel will *immediately* return the zero value of that type when read from.
Receivers can use an additional variable while receiving data from the channel to check whether the channel has been closed.

`v,` `ok` `:=` `<-ch`

In the above statement `ok` is true if the value was received by a successful send operation to a channel. If `ok` is false it means that we are reading from a closed channel.

Sending to a closed channel will *panic*. This is to ensure that goroutines are not blocked waiting to send values to a closed channel.

* The Channel Card Shuffle - the shuffle

.code code-session2/channel_shuffle.go /START OMIT/,/END OMIT/

* The Channel Card Shuffle - the trick

.play code-session2/success/channel_close_magic_trick.go /START OMIT/,/END OMIT/

* What a great shuffle!
A channel was used to communicated with the magician and tell him when to stop shuffling. The channel is closed when we are done picking card and the channel returns a `ok` false.
A separate channel was used to ensure that the goroutine finished its work before exiting. `main` waits for a value from this separate channel before exiting.
Closing the channel will make it immediately return the zero value, unblocking `main`.

.image https://media.giphy.com/media/Ok2oKUe5Mnq3m60vFJ/giphy.gif _ 350

* Channels and the for range - the shuffle
The *for* *range* form of the for loop can be used to receive values from a channel until it is closed. Once the channel is closed, the loop automatically exits.

.code code-session2/for_range_shuffle.go /START OMIT/,/END OMIT/

* The for range Card Shuffle - the trick

.play code-session2/success/for_range_magic_trick.go /START OMIT/,/END OMIT/

* Twin shuffles!
We managed the same trick but the for range made the shuffle more code succint. A win all around!

.image https://media.giphy.com/media/YpwwoFKZJrE4g/giphy.gif _ 450

* The select keyword

The `select` statement is used to choose from multiple send/receive channel operations.
The `select` statement blocks until one of the send/receive operation is ready.
If multiple operations are ready, one of them is chosen at random.
The `default` case in a `select` statement is executed when none of the other case is ready. This is generally used to prevent the `select` statement from blocking.

.code code-session2/select_syntax.go /START OMIT/,/END OMIT/

* The Select Sawing a Woman in Half - the saw performer

.play code-session2/saw_performer.go /START OMIT/,/END OMIT/

* The Select Sawing a Woman in Half - the trick

.play code-session2/failed/channels_selects.go /START OMIT/,/END OMIT/

* Great trick, but let's pay attention to the bows...
While technically the trick has succeeded, we can notice that the performers sometimes doesn't manage to take their bow. The `done` channel is closed to signal when they should stop sawing but after that the `main` resumes and shuts down.
We can pass another channel to wait on or use the trusty `WaitGroup`. We will use the `WaitGroup` as it clearly conveys that we will not be reading information, but only synchronizing.

.image https://media.giphy.com/media/3o6nUQapRZrXgdjVja/giphy.gif _ 500

* The Select Sawing a Woman in Half - the WaitGroup saw performer

.play code-session2/wg_saw_performer.go /START OMIT/,/END OMIT/

* The Select Sawing a Woman in Half - the WaitGroup trick

.play code-session2/success/channels_selects.go /START OMIT/,/END OMIT/

* Woah! What a great trick!
The Sawing a Woman in Half trick demonstrates to us how to use the `select` to read from several channels.
We also used the `sync.WaitGroup` to make sure we wait for the the performers to take their bows gracefully.
The bows are a great success now!

.image https://media.giphy.com/media/xUA7aN1MTCZx97V1Ic/giphy.gif _ 500

* WaitGroups vs Channels - the big showdown
In session I, we used the `sync.Mutex` and `sync.WaitGroup` to communicate over shared memory. Getting this right can be cumbersome.

Go encourages the use of channels to pass data between goroutines. Shared values passed on channels are, in fact, never actively shared by separate threads of execution. Data races cannot occur, by design.
*CAUTION*: The protections against data races fall through when passing and mutating values through pointers. Channels are not silver bullet data race protectors.

The Go team have coined a slogan to make this easier to remember:

.code code-session2/go_slogan.go /START OMIT/,/END OMIT/

This is also why the `sync` package had the disclaimer we saw last time.

.code code-session1/waitgroups/sync_documentation.go /START OMIT/,/END OMIT/

* When to sync and when to channel

- *Channels* are best suited in cases like passing ownership of data, distributing units of work, and communicating async results.
- *Mutexes* are best suited for caches, counters and holding state.
- *WaitGroups* are best used to ensure that all goroutines terminate cleanly before cleaning up.
- Another use for *WaitGroups* is for cyclic algorithms that involve a set of goroutines that all work independently for a while, then all wait on a barrier, before proceeding independently again.

* But most importantly...

Use whichever is most expressive and/or most simple. Channel communication, mutexes and wait-groups are complementary and can be combined.

The magic tricks we've seen today, I hope, have showcased this :)

.image https://media.giphy.com/media/iFsCkq1xk05l4DbgrY/giphy.gif _ 350

* Magic show curtain drop
Woah! What a great show! We hope you all enjoyed yourselves!

Our magicians have shown you the following magic tricks:

- *Rabbit* *Hat* trick: exploring the behaviour of pointers
- *Bullet* *Catch* trick: guarantee goroutine execution completion and order using the `sync.WaitGroup`
- *Teleporting* *Coin* trick: synchronizing Goroutines using channel sends and receives
- *Card* *Shuffle* trick: closing channels to signal work is ended
- *Sawing* *a* *Woman* *in* *Half* trick: using the select to read from multiple channels together with the `sync.WaitGroup` to wait for goroutine completion

* Useful links
Go by example - pointers

.link https://gobyexample.com/pointers

Go by example - Range over channels

.link https://gobyexample.com/range-over-channels

The Go blog - share memory by communicating

.link https://blog.golang.org/codelab-share

Effective Go - concurrency

.link https://golang.org/doc/effective_go.html#concurrency

Ardan Labs - the nature of channels in Go

.link https://www.ardanlabs.com/blog/2014/02/the-nature-of-channels-in-go.html

* See you next time!

.image https://media.giphy.com/media/7yojoQtevjOCI/giphy.gif _ 550

*
.image images/keep-in-touch.png